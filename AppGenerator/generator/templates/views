{% extends 'model' %}

{% block content %}
from django import forms
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.views.generic.list import ListView
from django.contrib import auth
from django.db.models import Q
from django.shortcuts import render

{{ super() }}

{% for form in model.forms -%}
from {{app_name}}.forms import {{form.title}}Form
from {{app_name}}.forms import Search{{form.title}}Form
{% endfor %}

{% for form in model.forms -%}
#{{form.title}}

class {{form.title}}List(ListView):
	model = {{form.title}}
	template_name = '{{app_name}}/list.html'
	
	def get_queryset(self):
		return {{form.title}}.objects.all()
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}List, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		context["detail_url"] = "detail{{form.title}}"
		context["add_url"] = "add{{form.title}}"
		context["search_url"] = "search{{form.title}}"
		context["main_attributes"] = {obj.pk : obj.__getattribute__('{{form.main_attribute}}') for obj in self.get_queryset()}
		context["custom_methods"] = [
		{% for operation in form.operations %}
		MenuItem("{{operation.label}}", "{{operation.name}}"),
		{% endfor %}
		]
		
		
		return context
	
class {{form.title}}Create(CreateView):
	model = {{form.title}}
	template_name = '{{app_name}}/add.html'
	form_class = {{form.title}}Form
	
	def get_success_url(self):
		return reverse('list')
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Create, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		return context
	
class {{form.title}}Detail(DetailView):
	model = {{form.title}}
	template_name = '{{app_name}}/detail.html'
	context_object_name = 'object'
	
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Detail, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		mapa = {}
	{% for field in form.fields %}
		{% if field.field_type != "Link" -%}
			mapa['{{field.name}}'] = self.object.__getattribute__('{{field.name}}')
		{% else -%}
			mapa['{{field.name}}'] = self.object.__getattribute__('{{field.name}}').all()
		{% endif -%} 
	{% endfor %}
	
		context["update_url"] = "update{{form.title}}"
		context["delete_url"] = "delete{{form.title}}"
		
		context["mapa"] = mapa
		return context

class {{form.title}}Update(UpdateView):
	model = {{form.title}}
	template_name = '{{app_name}}/update.html'
	form_class = '{{form.title}}'
	
	def get_success_url(self):
		return reverse('detail',args=(self.get_object().id,))
		
	def form_valid(self, form):
		self.object = form.save(commit=False)
		response = super({{form.title}}Update, self).form_valid(form)
		
		return response
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Update, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		return context

class {{form.title}}Delete(DeleteView):
	model = {{form.title}}
	template_name = '{{app_name}}/delete.html'
	
	def get_success_url(self):
		return reverse('list')
		
{% for operation in form.operations %}
{% if operation.field_type == "Search" %}
def {{operation.name}}(request):
	if request.method == 'POST':
		form = Search{{form.title}}Form(request.POST)
		
		if form.is_valid():
			objects = {{form.title}}.objects.filter(
			{% for field in form.fields -%}
				{% if field.field_type != "Link" %}
				Q({{field.name}}__icontains=form.cleaned_data['{{field.name}}']){% if not loop.last %}|{% endif %}
				{% else %}
				Q({{field.name}}__in=form.cleaned_data['{{field.name}}']){% if not loop.last %}|{% endif %}
				{% endif %}
			{% endfor -%}
			)
			
			result = {}
			for val in objects.all():
				result[reverse('detail{{form.title}}', args=(val.id,))] = val.name
			
	else:
		form = Search{{form.title}}Form()
		
	return render(request, '{{app_name}}/search.html', {'form': form,'title':"{{form.title}}"})
{% endif %}
{% endfor %}
{% endfor -%}

#User

class UserForm(forms.ModelForm):
	class Meta:
		model = User
		fields = ['first_name','last_name', 'username', 'email']
		
	def __init__(self, *args, **kwargs):
		super(UserForm, self).__init__(*args, **kwargs)
		for field in self.fields.values():
			field.widget.attrs['class']='form-control'

class DetailUser(DetailView):
	model = User
	template_name = '{{app_name}}/udetail.html'
	context_object_name='user'

class UserUpdate(UpdateView):
	model = User
	template_name = '{{app_name}}/uupdate.html'
	form_class = UserForm
	
	def get_success_url(self):
		return reverse('udetail',args=(self.get_object().id,))

class UserCreate(CreateView):
	model = User
	template_name = '{{app_name}}/register.html'
	form_class = UserForm
	
	def get_success_url(self):
		return reverse('index')
		
#index used for as login page

def index(request):
	if request.user.is_authenticated():
		context = {"isadmin":request.user.is_superuser,"user":request.user}
		return render(request,'{{app_name}}/main.html',context)
		
	username = request.POST.get("username","")
	password = request.POST.get("password","")
	
	user = auth.authenticate(username=username, password=password)
	context = {"isadmin":request.user.is_superuser,"user":request.user}
	
	if user is not None:
		auth.login(request, user)
		contextt = {"isadmin":request.user.is_superuser,"user":user}
		return render(request,'{{app_name}}/main.html',contextt)
	else:
		return render(request,'{{app_name}}/login.html')
		
class MenuItem:
	def __init__(self, name, url):
		self.name = name
		self.url = url
		
{% endblock %}



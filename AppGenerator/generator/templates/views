{% extends 'model' %}

{% block content %}
from django import forms
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.views.generic.list import ListView
from django.contrib import auth
from django.db.models import Q
from django.shortcuts import render
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required

{{ super() }}

{% for form in model.forms -%}
from {{app_name}}.forms import {{form.title}}Form
from {{app_name}}.forms import Search{{form.title}}Form
{% endfor %}
from {{app_name}}.forms import UserForm

{% for form in model.forms -%}
#{{form.title}}

{{form.title}}_field_labels = {
{%- for field in form.fields %}
				'{{field.name}}':'{{field.label}}',
{%- endfor -%}
{%- for other_form in model.forms -%}
	{%- for field in other_form.fields -%}
		{%- if field.field_type == 'Link' and field.form == form.title -%}
			{%- if field.link_type == '1-*' or field.link_type == '1-1' %}
				'{{other_form.title}}'.lower():'{{field.foreign_label}}',
			{%- else %}
				'{{other_form.title}}'.lower():'{{field.foreign_label}}',
			{%- endif -%}
		{%- endif -%}
	{%- endfor -%}
{%- endfor %}
}

class {{form.title}}List(ListView):
	model = {{form.title}}
	template_name = '{{app_name}}/list.html'
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super({{form.title}}List, self).dispatch(*args, **kwargs)
	
	def get_queryset(self):
		return {{form.title}}.objects.all()
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}List, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		context["detail_url"] = "detail{{form.title}}"
		context["add_url"] = "add{{form.title}}"
		context["search_url"] = "search{{form.title}}"
		context["main_attribute"] = "{{form.main_attribute}}"
		context["custom_methods"] = [
		{%- for operation in form.operations -%}
		{%- if not operation.param %}
			MenuItem("{{operation.label}}", "{{operation.name}}"),
		{%- endif -%}
		{%- endfor %}
		]
		
		return context
	
class {{form.title}}Create(CreateView):
	model = {{form.title}}
	template_name = '{{app_name}}/add.html'
	form_class = {{form.title}}Form
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super({{form.title}}Create, self).dispatch(*args, **kwargs)
	
	def get_success_url(self):
		return reverse('list{{form.title}}')
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Create, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		return context
	
class {{form.title}}Detail(DetailView):
	model = {{form.title}}
	template_name = '{{app_name}}/detail.html'
	context_object_name = 'object'
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super({{form.title}}Detail, self).dispatch(*args, **kwargs)
	
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Detail, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		mapa = {}
		
		for name in self.object._meta.get_all_field_names():
			if 'id' != name and not name.endswith("_id"):
				
				label = {{form.title}}_field_labels[name]
				if not label:
					label = name
				
				try:
					mapa[label] = self.object.__getattribute__(name).all()
				except AttributeError:
					try:
						mapa[label] = self.object.__getattribute__(name)
					except AttributeError:
						try:
							mapa[label] = self.object.__getattribute__(''.join([name,"_set"])).all()
						except AttributeError:
							mapa[label] = "not assigned"
		
		context["mapa"] = mapa
		
		context["update_url"] = "update{{form.title}}"
		context["delete_url"] = "delete{{form.title}}"
		
		context["custom_methods"] = [
		{%- for operation in form.operations -%}
		{%- if operation.param %}
			MenuItem("{{operation.label}}", "{{operation.name}}"),
		{%- endif -%}
		{%- endfor %}
		]
		
		return context

class {{form.title}}Update(UpdateView):
	model = {{form.title}}
	template_name = '{{app_name}}/update.html'
	form_class = {{form.title}}Form
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super({{form.title}}Update, self).dispatch(*args, **kwargs)
	
	def get_success_url(self):
		return reverse('detail{{form.title}}',args=(self.get_object().id,))
		
	def form_valid(self, form):
		self.object = form.save(commit=False)
		response = super({{form.title}}Update, self).form_valid(form)
		
		return response
		
	def get_context_data(self, **kwargs):
		context = super({{form.title}}Update, self).get_context_data(**kwargs)
		context["title"] = "{{form.title}}"
		
		return context

class {{form.title}}Delete(DeleteView):
	model = {{form.title}}
	template_name = '{{app_name}}/delete.html'
	
	def get_success_url(self):
		return reverse('list{{form.title}}')
		
{% for operation in form.operations %}
{% if operation.field_type == "Search" %}
@login_required(login_url="/")
def {{operation.name}}(request):
	if request.method == 'POST':
		form = Search{{form.title}}Form(request.POST)
		
		if form.is_valid():
			
			filter_map = {}
	{% for field in form.fields %}
			{{field.name}}_value = form.cleaned_data['{{field.name}}']
			
		{%- if field.field_type == "Link" -%}
			{%- if field.link_type == '*-*' %}
			if {{field.name}}_value:
				{{field.name}}_value = {{field.name}}_value[0]
				if {{field.name}}_value == '__not_assigned__':
					filter_map['{{field.name}}'] = None
				else:
					filter_map['{{field.name}}'] = {{field.name}}_value
			{%- else %}
			if {{field.name}}_value:
				if {{field.name}}_value == '__not_assigned__':
					filter_map['{{field.name}}'] = None
				else:
					filter_map['{{field.name}}'] = {{field.name}}_value
			{%- endif %}
		{%- else %}
			if {{field.name}}_value or {{field.name}}_value==0:
				filter_map['{{field.name}}'] = {{field.name}}_value
		{%- endif %}
	{%- endfor %}
			
			objects = {{form.title}}.objects.filter(**filter_map)
			
			result = {}
			for val in objects.all():
				result[reverse('detail{{form.title}}', args=(val.pk,))] = val.__getattribute__("{{form.main_attribute}}")
				
			return render(request, '{{app_name}}/result.html', {"results":result})
			
	else:
		form = Search{{form.title}}Form()
		
	return render(request, '{{app_name}}/search.html', {'form': form,'title':"{{form.title}}"})
{% endif %}
{% endfor %}
{% endfor -%}

#User

class DetailUser(DetailView):
	model = User
	template_name = '{{app_name}}/udetail.html'
	context_object_name='user'
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super(DetailUser, self).dispatch(*args, **kwargs)

class UserUpdate(UpdateView):
	model = User
	template_name = '{{app_name}}/uupdate.html'
	form_class = UserForm
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super(UserUpdate, self).dispatch(*args, **kwargs)
	
	def get_success_url(self):
		return reverse('udetail',args=(self.get_object().id,))

class UserCreate(CreateView):
	model = User
	template_name = '{{app_name}}/register.html'
	form_class = UserForm
	
	@method_decorator(login_required(login_url="/"))
	def dispatch(self, *args, **kwargs):
		return super(UserCreate, self).dispatch(*args, **kwargs)
	
	def get_success_url(self):
		return reverse('home')
		
class MenuItem:
	def __init__(self, name, url):
		self.name = name
		self.url = url
		
{% endblock %}



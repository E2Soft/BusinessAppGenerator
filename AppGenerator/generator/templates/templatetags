{% extends 'model' %}
{% block content%}
from django import template
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User
from builtins import str

register = template.Library()

{{ super() }}

@register.filter
def classname(obj):
	return obj.__class__.__name__ != "QuerySet"

@register.filter
def filternormal(field_names, field_values):
	return [name for name in field_names if field_values[name].__class__.__name__ != "QuerySet"]

@register.filter
def filterlists(field_names, field_values):
	return [name for name in field_names if field_values[name].__class__.__name__ == "QuerySet"]

@register.filter
def is_entity(obj):
{% for form in model.forms -%}
{% if loop.first %}
	if isinstance(obj, {{form.title}}):
		return True
{% else %}
	elif isinstance(obj, {{form.title}}):
		return True
{% endif %}
{% endfor %}
	elif isinstance(obj, User):
		return True
	else:
		return False

@register.filter
def filterurl(obj):
{% for form in model.forms -%}
{% if loop.first %}
	if isinstance(obj, {{form.title}}):
		return reverse('detail{{form.title}}',args=(obj.id,))
{% else %}
	elif isinstance(obj, {{form.title}}):
		return reverse('detail{{form.title}}',args=(obj.id,))
{% endif %}
{% endfor %}
	else:
		return reverse('udetail',args=(obj.id,))

@register.filter
def url_for(obj, url_type):
	{% for form in model.forms -%}
	{% if loop.first %}
		if isinstance(obj, {{form.title}}):
	{% else %}
		elif isinstance(obj, {{form.title}}):
	{% endif %}
			return reverse(url_type+'{{form.title}}',args=(obj.id,))
	{% endfor %}

@register.filter
def linked_add_url(linked_forms, field_name):
	return reverse('add'+linked_forms[field_name])

@register.filter
def get_attribute(o, key):
	return o.__getattribute__(key)

@register.filter
def map_value(dict, key):    
	return dict[key]

def go_depth(toolbar_items, do_val, is_submenu):

	string_val = do_val
	
	for menu in toolbar_items:
		if(is_submenu):
			string_val+="<li class='menu-item dropdown dropdown-submenu'>\n"
			string_val+="<a href='#' class='dropdown-toggle' data-toggle='dropdown'><span class='glyphicon glyphicon-list-alt'></span> {}</a>\n".format(menu.label)
			
		else:
			string_val+="<li class='menu-item dropdown'>\n"
			string_val+="<a href='#' class='dropdown-toggle' data-toggle='dropdown'><span class='glyphicon glyphicon-list-alt'></span> {}<b class='caret'></b></a>\n".format(menu.label)
		
		is_submenu = False
		
		string_val+="<ul class='dropdown-menu'>\n"
		
		for form in menu.items:
			string_val+="<li class='menu-item'><a href='{}'><span data-toggle='tooltip' data-placement='bottom' title='{}' class='glyphicon glyphicon-tasks'></span> {}</a></li>\n".format(form.url,form.tooltip,form.name)
		
		if(menu.subpackages):
			return go_depth(menu.subpackages, string_val, True)+"</ul>\n</li>\n"
		
		string_val+="</ul>\n"
		string_val+="</li>\n"
		
	return string_val

@register.filter
def prepare_toolbar(toolbar_items):
	ret_string = ""
	string_val = ""
	
	ret_string = go_depth(toolbar_items,string_val, False)
	print(ret_string)
	
	return ret_string

{% endblock %}

